#+TITLE: XMonad Config
#+PROPERTY: header-args :tangle xmonad.hs
* Imports
Modules to import.
#+begin_src haskell
  import System.Exit
  import System.Posix.Process
  import Control.Monad
  import Graphics.X11.ExtraTypes.XF86

  import XMonad
    
  import XMonad.ManageHook
  import XMonad.Hooks.DynamicLog
  import XMonad.Hooks.EwmhDesktops
  import XMonad.Hooks.ManageHelpers
  import XMonad.Hooks.ManageDocks
  import XMonad.Hooks.StatusBar
  import XMonad.Hooks.StatusBar.PP

  import XMonad.Prompt
  import XMonad.Prompt.ConfirmPrompt
  import XMonad.Prompt.Man
  import XMonad.Prompt.XMonad

  import XMonad.Util.EZConfig
  import XMonad.Util.Loggers
  import XMonad.Util.SpawnOnce
  import XMonad.Util.Run
  import XMonad.Util.Dmenu

  import XMonad.Actions.NoBorders

  import XMonad.Layout.SimpleFloat
  import XMonad.Layout.MultiToggle
  import XMonad.Layout.MultiToggle.Instances
#+end_src
* Constants
#+begin_src haskell
  myColor = "#5377b5"
  --myColor = "#5e6f50"
  myModMask = mod4Mask            
  myBorderWidth = 3               
  myNormalBorderColor = "#1d2021" 
  myFocusedBorderColor = myColor
  myBrowser = "librewolf"
  myTerminal = "kitty"
  myFM = "thunar"
#+end_src
* Manage Hook
#+begin_src haskell                                                                                                                                              
  myManageHook :: ManageHook                                                 
  myManageHook =                                                   
    composeAll                         
      [ className =? "Gimp" --> doFloat,
	isDialog --> doFloat,
	className =? "Spotify" --> doShift "9",
      	className =? "discord" --> doShift "9"
      ]
#+end_src
* Layout
#+begin_src haskell
  myLayout = (tiled ||| Mirror tiled ||| Full)
    where                                                                                  
      tiled = Tall nmaster delta ratio
      nmaster = 1
      ratio = 1 / 2
      delta = 3 / 100
#+end_src
* XMobar
#+begin_src haskell
  xmobar1 = statusBarProp "xmobar -x 0 $HOME/.config/xmonad/xmobar1.hs" (pure myXmobarPP)
  xmobar2 = statusBarProp "xmobar -x 1 $HOME/.config/xmonad/xmobar2.hs" (pure myXmobarPP)
  myXmobarPP :: PP                                                
  myXmobarPP =                                   
    def                                       
      { ppSep = wal " | ",                                             
	ppTitleSanitize = xmobarStrip,                         
	ppCurrent = wrap " " "" . xmobarBorder "Top" "#8be9fd" 2,
	ppHidden = white . wrap " " "",
	--  ppHiddenNoWindows = lowWhite . wrap " " "", -- IF YOU WANT ALL WORKSPACES ON THE BAR
	ppHiddenNoWindows = const "",
	ppUrgent = red . wrap (yellow "!") (yellow "!"),
	ppOrder = \[ws, l, _, wins] -> [ws, l, wins],
	ppExtras = [logTitles formatFocused formatUnfocused]
      }
    where
      formatFocused = wrap (white "[") (white "]") . wal . ppWindow
      formatUnfocused = wrap (lowWhite "[") (lowWhite "]") . grey . ppWindow
      ppWindow :: String -> String
      ppWindow = xmobarRaw . (\w -> if null w then "untitled" else w) . shorten 10
      blue, lowWhite, magenta, red, white, yellow, wal, grey, green :: String -> String
      magenta = xmobarColor "#ff79c6" ""
      blue = xmobarColor "#bd93f9" ""
      white = xmobarColor "#f8f8f2" ""
      yellow = xmobarColor "#f1fa8c" ""
      red = xmobarColor "#ff5555" ""
      lowWhite = xmobarColor "#bbbbbb" ""
      grey = xmobarColor "#8e8e8e" ""
      green = xmobarColor "#8ba37d" "" 
      wal = xmobarColor myColor ""
#+end_src
* Exit confirm (Needs Dmenu)
#+begin_src haskell
  quitWithWarning :: X ()
  quitWithWarning = do
    let m = "confirm quit"
    s <- dmenu [m]
    when (m == s) (io exitSuccess)
#+end_src
* Main
#+begin_src haskell
  main :: IO ()
  main = do
    xmonad
      $ docks
      $ ewmh
      $ ewmhFullscreen
      $ withEasySB (xmobar1 <> xmobar2) defToggleStrutsKey
      $ defaults
#+end_src
* My Config
#+begin_src haskell
  defaults = def
    { modMask = myModMask
    , terminal = myTerminal
    , borderWidth = myBorderWidth
    , normalBorderColor = myNormalBorderColor
    , focusedBorderColor = myFocusedBorderColor
    , manageHook = myManageHook
    , layoutHook = myLayout
    } `additionalKeys`
    [ ((myModMask, xK_f), spawn myBrowser)
    -- , ((myModMask .|. shiftMask, xK_q), quitWithWarning)  -- NEEDS DMENU
    , ((myModMask, xK_q), spawn "xmonad --restart")
    , ((myModMask .|. shiftMask, xK_l), spawn "slock")
    , ((myModMask .|. shiftMask, xK_e), spawn "emacsclient -c")
    -- , ((myModMask .|. shiftMask, xK_Return), spawn "emacsclient -c --eval '(vterm)'")
    , ((myModMask .|. shiftMask, xK_p), spawn "spotify")
    , ((myModMask, xK_p), spawn "bash /home/ame/.config/wal/dmen.sh")
    , ((myModMask .|. shiftMask, xK_d), spawn "discord")
    , ((myModMask .|. shiftMask, xK_s), spawn "maim -s /home/ame/Pictures/screenshots/$(date +%s)-screenshot.png && thunar ~/Pictures/screenshots/")
    , ((myModMask .|. shiftMask, xK_t), spawn myFM)
    , ((myModMask .|. shiftMask, xK_b), withFocused toggleBorder)
    , ((myModMask .|. shiftMask, xK_r), spawn "bash /home/ame/.config/screenlayout.sh")
    , ((0, xF86XK_AudioPlay) , spawn "playerctl -p spotify play-pause")
    , ((0, xF86XK_AudioPrev) , spawn "playerctl  previous")
    , ((0, xF86XK_AudioNext) , spawn "playerctl next")
    ]
#+end_src

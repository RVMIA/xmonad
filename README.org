#+TITLE: XMonad Config
#+PROPERTY: header-args :tangle xmonad.hs
* XMonad Config
** Imports
Modules to import.
#+begin_src haskell
  import System.Exit
  import Control.Monad

  import XMonad

  import XMonad.ManageHook
  import XMonad.Hooks.DynamicLog
  import XMonad.Hooks.EwmhDesktops
  import XMonad.Hooks.ManageHelpers
  import XMonad.Hooks.ManageDocks
  import XMonad.Hooks.StatusBar
  import XMonad.Hooks.StatusBar.PP

  import XMonad.Prompt
  import XMonad.Prompt.ConfirmPrompt

  import XMonad.Util.EZConfig
  import XMonad.Util.Loggers
  import XMonad.Util.SpawnOnce
  import XMonad.Util.Run
  import XMonad.Util.Dmenu
#+end_src

** Autostart
#+begin_src haskell
myStartupHook :: X ()                                                                                                                         
myStartupHook = do                                                                                                                            
  spawnOnce "nitrogen --restore &"                                                                                            
  spawnOnce "wal -R &"   
#+end_src

** Constants
#+begin_src haskell
  myTerm = "kitty"                
  myModMask = mod4Mask            
  myBorderWidth = 3               
  myNormalBorderColor = "#222222" 
  myFocusedBorderColor = "#DE5e5e"
#+end_src
** Manage Hook
#+begin_src haskell                                                                                                                                              
myManageHook :: ManageHook                                                                                                                    
myManageHook =                                                                                                                                
  composeAll                                                                                                                                  
    [ className =? "Gimp" --> doFloat,                                                                                                        
      isDialog --> doFloat                                                                                                                    
    ]
#+end_src
** Layout
#+begin_src haskell
myLayout = (tiled ||| Mirror tiled ||| Full)                                                                                                  
  where                                                                                                                                       
    tiled = Tall nmaster delta ratio                                                                                                          
    nmaster = 1                                                                                                                               
    ratio = 1 / 2                                                                                                                             
    delta = 3 / 100                                                                                                                           
#+end_src
** XMobarPP
#+begin_src haskell
myXmobarPP :: PP                                                                                                                              
myXmobarPP =                                                                                                                                  
  def                                                                                                                                         
    { ppSep = walred " | ",                                                                                                                   
      ppTitleSanitize = xmobarStrip,                                                                                                          
      ppCurrent = wrap " " "" . xmobarBorder "Top" "#8be9fd" 2,                                                                               
      ppHidden = white . wrap " " "",                                                                                                         
      ppHiddenNoWindows = lowWhite . wrap " " "",                                                                                             
      ppUrgent = red . wrap (yellow "!") (yellow "!"),                                                                                        
      ppOrder = \[ws, l, _, wins] -> [ws, l, wins],                                                                                           
      ppExtras = [logTitles formatFocused formatUnfocused]                                                                                    
    }                                                                                                                                         
  where                                                                                                                                       
    formatFocused = wrap (white "[") (white "]") . walred . ppWindow                                                                          
    formatUnfocused = wrap (lowWhite "[") (lowWhite "]") . grey . ppWindow                                                                    
    ppWindow :: String -> String                                                                                                              
    ppWindow = xmobarRaw . (\w -> if null w then "untitled" else w) . shorten 30                                                              
                                                                                                                                              
    blue, lowWhite, magenta, red, white, yellow, walred, grey :: String -> String                                                             
    magenta = xmobarColor "#ff79c6" ""                                                                                                        
    blue = xmobarColor "#bd93f9" ""                                                                                                           
    white = xmobarColor "#f8f8f2" ""                                                                                                          
    yellow = xmobarColor "#f1fa8c" ""                                                                                                         
    red = xmobarColor "#ff5555" ""                                                                                                            
    lowWhite = xmobarColor "#bbbbbb" ""                                                                                                       
    grey = xmobarColor "#8e8e8e" ""                                                                                                           
    walred = xmobarColor "#de5e5e" ""                                                                                                         
#+end_src
** Exit confirm
#+begin_src haskell
  quitWithWarning :: X ()
  quitWithWarning = do
    let m = "confirm quit"
    s <- dmenu [m]
    when (m == s) (io exitSuccess)
#+end_src
** Main
#+begin_src haskell                                                                                                                                             
  main :: IO ()
  main = do
    xmproc0 <- spawnPipe "xmobar -x 0 $HOME/.config/xmonad/xmobar/xmobar.hs"
    xmproc1 <- spawnPipe "xmobar -x 1 $HOME/.config/xmonad/xmobar/xmobar.hs"
    xmonad
      $ docks
      $ ewmh
      $ withEasySB (statusBarProp "xmobar ~/.config/xmonad/xmobar/xmobar.hs" (pure myXmobarPP)) defToggleStrutsKey
      $ defaults
#+end_src
** My Config
#+begin_src haskell
  defaults = def
    { terminal = myTerm
    , modMask = myModMask
    , borderWidth = myBorderWidth
    , normalBorderColor = myNormalBorderColor
    , focusedBorderColor = myFocusedBorderColor
    , manageHook = myManageHook
    , layoutHook = myLayout
    , startupHook = myStartupHook
    } `additionalKeysP`
    [ ("M-f", spawn "firefox")
    , ("M-S-q", quitWithWarning)
    , ("M-S-l", spawn "slock")
    , ("M-S-e", spawn "emacs")
    , ("M-S-p", spawn "spotify")
    , ("M-S-s", spawn "maim -s /home/ame/screenshots.png")
    , ("M-S-v", spawn "code")
    , ("M-S-t", spawn "thunar")
    ]
#+end_src
